<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.beetles.mapper.DetailsMapper">

    <insert id="addDetails_1">
        INSERT INTO article(title,
        <if test='tags != null'>tags,</if>
        coverImg, summary, type, visibility, content)
        VALUES (#{title},
        <if test='tags != null'>#{tags},</if>
        #{coverImg}, #{summary}, #{type}, #{visibility}, #{content})
    </insert>
    <insert id="addDetails">
        INSERT INTO article(id, title, cover_image, tags, summary, type, visibility, content, user_id)
        VALUES (#{id}, #{title}, #{coverImg}, #{tags}, #{summary}, #{type}, #{visibility}, #{content}, #{userId})
    </insert>
    <insert id="addComment">
        INSERT INTO comment(id, article_id, content, user_id, status)
        VALUES (#{id}, #{detailsId}, #{comment}, #{userId}, #{status})
    </insert>
    <insert id="addLikeDetail">
        INSERT INTO article_likes(article_id, user_id, id)
        VALUES (#{detailsId}, #{userId}, #{id})
    </insert>
    <insert id="addStarDetail">
        INSERT INTO article_stars(article_id, user_id, id, folder_id)
        VALUES (#{detailsId}, #{userId}, #{id}, #{folderId})
    </insert>
    <insert id="addNewStarFolder">
        INSERT INTO article_stars_folder(id, folder_name,
                                        <if test='summary != null'>summary,</if>
                                        isVisible, user_id)
        VALUES (#{uuid}, #{folderName},
                <if test='summary != null'>#{summary},</if>
                #{isVisible}, #{userId})
    </insert>
    <update id="addDetailsView">
        UPDATE article
        SET view_count = view_count + 1
        WHERE id = #{id}
    </update>
    <update id="changeLikeInArticle">
        UPDATE article
        SET like_count = like_count + #{i}
        WHERE id = #{detailsId}
    </update>
    <update id="changeStarInArticle">
        UPDATE article
        SET star_count = star_count + #{i}
        WHERE id = #{detailsId}
    </update>
    <update id="changeStarFolderInfo">
        UPDATE article_stars_folder
        <if test="type == 'folderName'">SET folder_name = #{value} WHERE id = #{folderId}</if>
        <if test="type == 'folderSummary'">SET summary = #{value} WHERE id = #{folderId}</if>
    </update>
    <delete id="deleteLikeDetail">
        DELETE FROM article_likes
        WHERE article_id = #{detailsId} AND user_id = #{userId}
    </delete>
    <delete id="deleteStarDetail">
        DELETE FROM article_stars
        WHERE article_id = #{detailsId} AND user_id = #{userId}
    </delete>
    <select id="getDetailsInfoList" resultType="java.util.Map">
        SELECT a.id, a.title, a.cover_image AS coverImg, a.summary, a.type, a.visibility, u.nick_name AS author, u.avatar,a.user_id AS authorId,
                CASE
                WHEN a.view_count >= 1000000 THEN CONCAT(ROUND(a.view_count/1000000, 1), 'M')
                WHEN a.view_count >= 1000 THEN CONCAT(ROUND(a.view_count/1000, 1), 'k')
                ELSE CAST(a.view_count AS CHAR)
                END AS views,
               a.like_count AS likes, a.star_count AS stars, a.create_time AS createTime, a.update_time AS updateTime
        FROM article a join sys_user u ON a.user_id = u.id <if test="type != null">JOIN tag t</if>
        WHERE (a.visibility = 1
            <if test='userId != null'>OR (a.visibility = 2 AND a.user_id = #{userId})</if>)
            <if test='type != null'>AND JSON_CONTAINS_PATH(a.tags, 'one', CONCAT('$[*]."', t.name , '"')) AND t.name = #{type}</if>

        ORDER BY a.id DESC
        LIMIT #{pageSize} OFFSET #{start}
    </select>
    <select id="getDetailsContent" resultType="java.util.Map">
        SELECT a.id, a.user_id, a.title, a.summary, a.content, a.view_count, a.like_count AS likes, a.star_count AS stars,
                DATE_FORMAT(a.create_time, '%Y-%m-%d %H:%i:%s') AS createTime,
                DATE_FORMAT(a.update_time, '%Y-%m-%d %H:%i:%s') AS updateTime,
                u.nick_name AS author, u.avatar
        FROM article a join sys_user u ON a.user_id = u.id
        WHERE a.id = #{id}
    </select>
    <select id="getDetailsInfoListTotal" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM article a <if test="type != null">JOIN tag t</if>
        WHERE (a.visibility = 1
            <if test='userId != null'>OR (a.visibility = 2 AND a.user_id = #{userId})</if>)
            <if test='type != null'>AND JSON_CONTAINS_PATH(a.tags, 'one', CONCAT('$[*]."', t.name , '"'))
                AND t.name = #{type}</if>
    </select>
    <select id="getCommentsList" resultType="java.util.Map">
        SELECT c.id, c.content AS comment, DATE_FORMAT(c.create_time, '%Y-%m-%d %H:%i:%s') AS createTime, u.nick_name AS author, u.avatar, c.user_id AS authorId
        FROM comment c join sys_user u ON c.user_id = u.id
        WHERE c.article_id = #{detailsId} AND c.status = 1
        ORDER BY c.create_time ASC
    </select>
    <select id="getCommentsDanmakus" resultType="java.lang.String">
        SELECT content
        FROM comment
        WHERE article_id = #{detailsId} AND status = 1
        ORDER BY RAND()
        LIMIT 10
    </select>
    <select id="selectLikeDetail" resultType="java.lang.Integer">
        SELECT count(*)
        FROM article_likes
        WHERE article_id = #{detailsId} AND user_id = #{userId}
    </select>
    <select id="selectStarDetail" resultType="java.lang.String">
        SELECT folder_id
        FROM article_stars
        WHERE article_id = #{detailsId} AND user_id = #{userId}
    </select>
    <select id="getTagsFromTag" resultType="java.util.Map">
        SELECT title as tag, name as content, id
        FROM tag
    </select>
    <select id="getTagsListInfo" resultType="java.util.Map">
        SELECT content
        FROM tag_content
        WHERE type_id = #{id}
    </select>
    <select id="getTagsFromTagContent" resultType="java.util.Map">
        SELECT c.content as content, t.name as tag, c.id
        FROM tag_content c JOIN tag t ON c.type_id = t.id
    </select>
    <select id="getTags" resultType="java.util.Map">
        SELECT name,title,id
        FROM tag
    </select>
    <select id="selectDetailsList" resultType="java.util.Map">
        SELECT a.id, a.title, a.cover_image AS coverImg, a.summary, a.type, a.visibility,
        u.nick_name AS author, u.avatar, a.user_id AS authorId,

        CASE
        WHEN a.view_count >= 1000000 THEN CONCAT(ROUND(a.view_count/1000000, 1), 'M')
        WHEN a.view_count >= 1000 THEN CONCAT(ROUND(a.view_count/1000, 1), 'k')
        ELSE CAST(a.view_count AS CHAR)
        END AS views,

        a.like_count AS likes, a.star_count AS stars,
        DATE_FORMAT(a.create_time, '%Y-%m-%d') AS createTime, DATE_FORMAT(a.update_time, '%Y-%m-%d') AS updateTime
        FROM article a
        JOIN sys_user u ON a.user_id = u.id
        WHERE (a.visibility = 1
        <if test='userId != null'>OR (a.visibility = 2 AND a.user_id = #{userId})</if>)
        <if test='input != null'>AND (title LIKE CONCAT('%', #{input}, '%')
            OR content LIKE CONCAT('%', #{input}, '%')
            OR summary LIKE CONCAT('%', #{input}, '%'))</if>

        <if test='timeNaviType == "默认"'>ORDER BY a.id DESC</if>
        <if test='timeNaviType == "最新"'>ORDER BY a.create_time DESC</if>
        LIMIT #{pageSize} OFFSET #{start}
    </select>
    <select id="selectDetailsListTotal" resultType="java.lang.Object">
        SELECT COUNT(*)
        FROM article a
        JOIN sys_user u ON a.user_id = u.id
        WHERE (a.visibility = 1
        <if test='userId != null'>OR (a.visibility = 2 AND a.user_id = #{userId})</if>)
        <if test='input != null'>AND (title LIKE CONCAT('%', #{input}, '%')
            OR content LIKE CONCAT('%', #{input}, '%')
            OR summary LIKE CONCAT('%', #{input}, '%'))</if>
    </select>
    <select id="getFollowedDetailsInfoList" resultType="java.util.Map">
        SELECT a.id, a.title, a.cover_image AS coverImg, a.summary, a.type, a.visibility, u.nick_name AS author, u.avatar,a.user_id AS authorId,
               CASE
                   WHEN a.view_count >= 1000000 THEN CONCAT(ROUND(a.view_count/1000000, 1), 'M')
                   WHEN a.view_count >= 1000 THEN CONCAT(ROUND(a.view_count/1000, 1), 'k')
                   ELSE CAST(a.view_count AS CHAR)
                   END AS views,
               a.like_count AS likes, a.star_count AS stars, a.create_time AS createTime, a.update_time AS updateTime

        FROM article a join sys_user u ON a.user_id = u.id
                       JOIN sys_user_follows AS uf ON uf.user_id = #{userId}
        WHERE (a.visibility = 1
            OR (a.visibility = 2 AND a.user_id = #{userId})
            OR (a.visibility = 3 AND a.user_id = uf.follower_id))
          AND uf.follower_id = a.user_id

        ORDER BY a.id DESC
        LIMIT 9 OFFSET #{currentPageNum}
    </select>
    <select id="getStarFolderContents" resultType="java.util.Map">
        SELECT
            a_s.id AS id, a_s.article_id AS articleId, a_s_f.folder_name AS folderName,
            a.title AS title
        FROM
            article_stars a_s JOIN article_stars_folder a_s_f ON a_s.folder_id = a_s_f.id
                              JOIN article a ON a_s.article_id = a.id
        WHERE
            a_s.user_id = #{userId}
          AND a_s.folder_id = #{folderId}
            LIMIT #{pageSize} OFFSET #{start}
    </select>
    <select id="getStarFolderList" resultType="java.util.Map">
        SELECT
            a_s_f.id AS id,
            a_s_f.folder_name AS folderName,
            (SELECT COUNT(*) FROM article_stars a_s WHERE a_s.folder_id = a_s_f.id) AS contentCount
        FROM
            article_stars_folder a_s_f
        WHERE
            user_id = #{userId}
    </select>
    <select id="getStarFolderInfo" resultType="java.util.Map">
        SELECT
            a_s_f.id AS id,
            a_s_f.folder_name AS folderName,
            a_s_f.summary AS summary
        FROM
            article_stars_folder a_s_f
        WHERE
            a_s_f.id = #{folderId}
    </select>
    <select id="selectFolderIdByUserId" resultType="java.lang.String">
        SELECT
            id
        FROM
            article_stars_folder
        WHERE
            user_id = #{userId}
            AND folder_name = '默认收藏夹'
    </select>
    <select id="getFolderId" resultType="java.lang.String">
        SELECT
            folder_id
        FROM
            article_stars
        WHERE
            user_id = #{userId}
            AND article_id = #{detailsId}
    </select>
</mapper>
